// Code generated by MockGen. DO NOT EDIT.
// Source: internal/backoffice/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/backoffice/interfaces.go -destination=internal/backoffice/repository_mock.go -package=backoffice
//

// Package backoffice is a generated GoMock package.
package backoffice

import (
	context "context"
	reflect "reflect"

	domain "github.com/IsaacDSC/gqueue/internal/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DisabledEvent mocks base method.
func (m *MockRepository) DisabledEvent(ctx context.Context, eventID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisabledEvent", ctx, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisabledEvent indicates an expected call of DisabledEvent.
func (mr *MockRepositoryMockRecorder) DisabledEvent(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisabledEvent", reflect.TypeOf((*MockRepository)(nil).DisabledEvent), ctx, eventID)
}

// GetEventByID mocks base method.
func (m *MockRepository) GetEventByID(ctx context.Context, eventID uuid.UUID) (domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, eventID)
	ret0, _ := ret[0].(domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockRepositoryMockRecorder) GetEventByID(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockRepository)(nil).GetEventByID), ctx, eventID)
}

// GetInternalEvent mocks base method.
func (m *MockRepository) GetInternalEvent(ctx context.Context, eventName, serviceName, eventType, state string) (domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalEvent", ctx, eventName, serviceName, eventType, state)
	ret0, _ := ret[0].(domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalEvent indicates an expected call of GetInternalEvent.
func (mr *MockRepositoryMockRecorder) GetInternalEvent(ctx, eventName, serviceName, eventType, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalEvent", reflect.TypeOf((*MockRepository)(nil).GetInternalEvent), ctx, eventName, serviceName, eventType, state)
}

// GetInternalEvents mocks base method.
func (m *MockRepository) GetInternalEvents(ctx context.Context, filters domain.FilterEvents) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalEvents", ctx, filters)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalEvents indicates an expected call of GetInternalEvents.
func (mr *MockRepositoryMockRecorder) GetInternalEvents(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalEvents", reflect.TypeOf((*MockRepository)(nil).GetInternalEvents), ctx, filters)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, event domain.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, event)
}

// UpdateEvent mocks base method.
func (m *MockRepository) UpdateEvent(ctx context.Context, event domain.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockRepositoryMockRecorder) UpdateEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockRepository)(nil).UpdateEvent), ctx, event)
}
