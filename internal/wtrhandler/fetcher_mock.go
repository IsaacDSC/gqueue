// Code generated by MockGen. DO NOT EDIT.
// Source: internal/wtrhandler/request_handle_asynq.go
//
// Generated by this command:
//
//	mockgen -source=internal/wtrhandler/request_handle_asynq.go -destination=internal/wtrhandler/fetcher_mock.go -package=wtrhandler Fetcher
//

// Package wtrhandler is a generated GoMock package.
package wtrhandler

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
	isgomock struct{}
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// NotifyTrigger mocks base method.
func (m *MockFetcher) NotifyTrigger(ctx context.Context, data map[string]any, headers map[string]string, trigger Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyTrigger", ctx, data, headers, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyTrigger indicates an expected call of NotifyTrigger.
func (mr *MockFetcherMockRecorder) NotifyTrigger(ctx, data, headers, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyTrigger", reflect.TypeOf((*MockFetcher)(nil).NotifyTrigger), ctx, data, headers, trigger)
}
