// Code generated by MockGen. DO NOT EDIT.
// Source: internal/wtrhandler/deadletter_asynq_handle.go
//
// Generated by this command:
//
//	mockgen -source=internal/wtrhandler/deadletter_asynq_handle.go -destination=internal/wtrhandler/deadletter_mock.go -package=wtrhandler DeadLetterStore
//

// Package wtrhandler is a generated GoMock package.
package wtrhandler

import (
	context "context"
	reflect "reflect"

	domain "github.com/IsaacDSC/gqueue/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDeadLetterStore is a mock of DeadLetterStore interface.
type MockDeadLetterStore struct {
	ctrl     *gomock.Controller
	recorder *MockDeadLetterStoreMockRecorder
	isgomock struct{}
}

// MockDeadLetterStoreMockRecorder is the mock recorder for MockDeadLetterStore.
type MockDeadLetterStoreMockRecorder struct {
	mock *MockDeadLetterStore
}

// NewMockDeadLetterStore creates a new mock instance.
func NewMockDeadLetterStore(ctrl *gomock.Controller) *MockDeadLetterStore {
	mock := &MockDeadLetterStore{ctrl: ctrl}
	mock.recorder = &MockDeadLetterStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeadLetterStore) EXPECT() *MockDeadLetterStoreMockRecorder {
	return m.recorder
}

// GetAllSchedulers mocks base method.
func (m *MockDeadLetterStore) GetAllSchedulers(ctx context.Context, state string) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSchedulers", ctx, state)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSchedulers indicates an expected call of GetAllSchedulers.
func (mr *MockDeadLetterStoreMockRecorder) GetAllSchedulers(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSchedulers", reflect.TypeOf((*MockDeadLetterStore)(nil).GetAllSchedulers), ctx, state)
}
