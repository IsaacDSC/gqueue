// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/repository/adapter.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/repository/adapter.go -destination=internal/infra/repository/repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	structs "github.com/IsaacDSC/webhook/internal/structs"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateExternalEvent mocks base method.
func (m *MockRepository) CreateExternalEvent(ctx context.Context, event structs.ExternalEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternalEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExternalEvent indicates an expected call of CreateExternalEvent.
func (mr *MockRepositoryMockRecorder) CreateExternalEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalEvent", reflect.TypeOf((*MockRepository)(nil).CreateExternalEvent), ctx, event)
}

// CreateInternalEvent mocks base method.
func (m *MockRepository) CreateInternalEvent(ctx context.Context, event structs.InternalEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInternalEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInternalEvent indicates an expected call of CreateInternalEvent.
func (mr *MockRepositoryMockRecorder) CreateInternalEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInternalEvent", reflect.TypeOf((*MockRepository)(nil).CreateInternalEvent), ctx, event)
}

// GetInternalEvent mocks base method.
func (m *MockRepository) GetInternalEvent(ctx context.Context, eventName string) (structs.InternalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalEvent", ctx, eventName)
	ret0, _ := ret[0].(structs.InternalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalEvent indicates an expected call of GetInternalEvent.
func (mr *MockRepositoryMockRecorder) GetInternalEvent(ctx, eventName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalEvent", reflect.TypeOf((*MockRepository)(nil).GetInternalEvent), ctx, eventName)
}

// SaveExternalEvent mocks base method.
func (m *MockRepository) SaveExternalEvent(ctx context.Context, event structs.ExternalEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExternalEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveExternalEvent indicates an expected call of SaveExternalEvent.
func (mr *MockRepositoryMockRecorder) SaveExternalEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExternalEvent", reflect.TypeOf((*MockRepository)(nil).SaveExternalEvent), ctx, event)
}

// SaveInternalEvent mocks base method.
func (m *MockRepository) SaveInternalEvent(ctx context.Context, event structs.InternalEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInternalEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveInternalEvent indicates an expected call of SaveInternalEvent.
func (mr *MockRepositoryMockRecorder) SaveInternalEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInternalEvent", reflect.TypeOf((*MockRepository)(nil).SaveInternalEvent), ctx, event)
}
