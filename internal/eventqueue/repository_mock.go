// Code generated by MockGen. DO NOT EDIT.
// Source: internal/eventqueue/internal_handle_asynq.go
//
// Generated by this command:
//
//	mockgen -source=internal/eventqueue/internal_handle_asynq.go -destination=internal/eventqueue/repository_mock.go -package=eventqueue Repository
//

// Package eventqueue is a generated GoMock package.
package eventqueue

import (
	context "context"
	reflect "reflect"

	domain "github.com/IsaacDSC/webhook/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetInternalEvent mocks base method.
func (m *MockRepository) GetInternalEvent(ctx context.Context, eventName string) (domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalEvent", ctx, eventName)
	ret0, _ := ret[0].(domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalEvent indicates an expected call of GetInternalEvent.
func (mr *MockRepositoryMockRecorder) GetInternalEvent(ctx, eventName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalEvent", reflect.TypeOf((*MockRepository)(nil).GetInternalEvent), ctx, eventName)
}
