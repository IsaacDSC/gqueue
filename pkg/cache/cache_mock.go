// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/cache/adapter.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/cache/adapter.go -destination=internal/infra/cache/cache_mock.go -package=cache
//

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetDefaultTTL mocks base method.
func (m *MockCache) GetDefaultTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDefaultTTL indicates an expected call of GetDefaultTTL.
func (mr *MockCacheMockRecorder) GetDefaultTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultTTL", reflect.TypeOf((*MockCache)(nil).GetDefaultTTL))
}

// Hydrate mocks base method.
func (m *MockCache) Hydrate(ctx context.Context, key Key, value any, ttl time.Duration, fn Fn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hydrate", ctx, key, value, ttl, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hydrate indicates an expected call of Hydrate.
func (mr *MockCacheMockRecorder) Hydrate(ctx, key, value, ttl, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hydrate", reflect.TypeOf((*MockCache)(nil).Hydrate), ctx, key, value, ttl, fn)
}

// Key mocks base method.
func (m *MockCache) Key(params ...string) Key {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Key", varargs...)
	ret0, _ := ret[0].(Key)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockCacheMockRecorder) Key(params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockCache)(nil).Key), params...)
}

// Once mocks base method.
func (m *MockCache) Once(ctx context.Context, key Key, value any, ttl time.Duration, fn Fn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Once", ctx, key, value, ttl, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Once indicates an expected call of Once.
func (mr *MockCacheMockRecorder) Once(ctx, key, value, ttl, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Once", reflect.TypeOf((*MockCache)(nil).Once), ctx, key, value, ttl, fn)
}
