name: CI

on:
  pull_request:
    branches: [main, master, develop]
  push:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      triggered_by:
        description: "Who triggered this workflow"
        required: false
        default: "manual"
      pr_number:
        description: "PR number if triggered by comment"
        required: false
      comment_id:
        description: "Comment ID if triggered by comment"
        required: false

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Generate mocks
        run: make generate-mocks

      - name: Run tests
        run: make test
        env:
          GO_ENV: test
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          CACHE_ADDR: localhost:6379
          CACHE_DEFAULT_TTL: 24h
          DB_DRIVER: pg
          DB_CONNECTION_STRING: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          WQ: redis
          WQ_CONCURRENCY: 32
          WQ_QUEUES: '{"internal.critical": 7, "internal.high": 5, "internal.medium": 3, "internal.low": 1, "external.critical": 7, "external.high": 5, "external.medium": 3, "external.low": 1}'

      - name: Check test coverage
        run: |
          go test ./... -coverprofile=coverage.out
          go tool cover -func=coverage.out
        env:
          GO_ENV: test
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          CACHE_ADDR: localhost:6379
          CACHE_DEFAULT_TTL: 24h
          DB_DRIVER: pg
          DB_CONNECTION_STRING: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          WQ: redis
          WQ_CONCURRENCY: 32
          WQ_QUEUES: '{"internal.critical": 7, "internal.high": 5, "internal.medium": 3, "internal.low": 1, "external.critical": 7, "external.high": 5, "external.medium": 3, "external.low": 1}'

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run go fmt
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not properly formatted:"
            echo "$unformatted"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run go mod tidy check
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Build application
        run: make build

      - name: Test build artifacts
        run: |
          if [ ! -f "./webhook" ]; then
            echo "Build artifact not found!"
            exit 1
          fi
          echo "Build successful - webhook binary created"
