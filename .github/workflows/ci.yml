name: CI

on:
  pull_request:
    branches: [main, master, develop]
  push:
    branches: [main, master, develop]
  issue_comment:
    types: [created]

jobs:
  # Check if comment is a retest command
  check_retest_comment:
    name: Check Retest Comment
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
    steps:
      - name: Check for retest command
        id: check
        run: |
          comment="${{ github.event.comment.body }}"
          if [[ "$comment" == "/retest" ]] || [[ "$comment" == "retest" ]] || [[ "$comment" == "/rerun" ]] || [[ "$comment" == "rerun" ]]; then
            echo "triggered=true" >> $GITHUB_OUTPUT
          else
            echo "triggered=false" >> $GITHUB_OUTPUT
          fi

  # React to retest comment
  react_to_comment:
    name: React to Retest Comment
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    runs-on: ubuntu-latest
    needs: [check_retest_comment]
    steps:
      - name: Add reaction to comment
        if: needs.check_retest_comment.outputs.triggered == 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: "+1"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'push' ||
      (github.event_name == 'issue_comment' && needs.check_retest_comment.outputs.triggered == 'true')
    needs: [check_retest_comment]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && github.event.pull_request.head.sha || github.sha }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Generate mocks
        run: make generate-mocks

      - name: Run tests
        run: make test
        env:
          GO_ENV: test
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          CACHE_ADDR: localhost:6379
          CACHE_DEFAULT_TTL: 24h
          DB_DRIVER: pg
          DB_CONNECTION_STRING: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          WQ: redis
          WQ_CONCURRENCY: 32

      - name: Check test coverage
        run: |
          go test ./... -coverprofile=coverage.out
          go tool cover -func=coverage.out
        env:
          GO_ENV: test
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          CACHE_ADDR: localhost:6379
          CACHE_DEFAULT_TTL: 24h
          DB_DRIVER: pg
          DB_CONNECTION_STRING: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          WQ: redis
          WQ_CONCURRENCY: 32

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'push' ||
      (github.event_name == 'issue_comment' && needs.check_retest_comment.outputs.triggered == 'true')
    needs: [check_retest_comment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && github.event.pull_request.head.sha || github.sha }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run go fmt
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not properly formatted:"
            echo "$unformatted"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run go mod tidy check
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  build:
    name: Build Application
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'push' ||
      (github.event_name == 'issue_comment' && needs.check_retest_comment.outputs.triggered == 'true')
    needs: [check_retest_comment, test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && github.event.pull_request.head.sha || github.sha }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Build application
        run: make build

      - name: Test build artifacts
        run: |
          if [ ! -f "./webhook" ]; then
            echo "Build artifact not found!"
            exit 1
          fi
          echo "Build successful - webhook binary created"
